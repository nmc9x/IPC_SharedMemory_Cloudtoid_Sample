<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cloudtoid.Interprocess</name>
    </assembly>
    <members>
        <member name="M:Cloudtoid.Interprocess.ISubscriber.TryDequeue(System.Threading.CancellationToken,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            Dequeues a message from the queue if the queue is not empty. This is a non-blocking
            call and returns immediately.
            This overload allocates a <see cref="T:System.Byte"/> array the size of the message in the
            queue and copies the message from the shared memory to it. To avoid this memory
            allocation, consider reusing a previously allocated <see cref="T:System.Byte"/> array with
            <see cref="M:Cloudtoid.Interprocess.ISubscriber.TryDequeue(System.Memory{System.Byte},System.Threading.CancellationToken,System.ReadOnlyMemory{System.Byte}@)"/>.
            <see cref="T:System.Buffers.ArrayPool`1"/> can be a good way of pooling and
            reusing byte arrays.
            </summary>
            <param name="cancellation">A cancellation token to observe while waiting for the task to complete.</param>
            <param name="message">The dequeued message.</param>
            <returns>Returns <see langword="false"/> if the queue is empty.</returns>
        </member>
        <member name="M:Cloudtoid.Interprocess.ISubscriber.TryDequeue(System.Memory{System.Byte},System.Threading.CancellationToken,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            Dequeues a message from the queue if the queue is not empty. This is a non-blocking
            call and returns immediately. This method does not allocated memory and only populates
            the <paramref name="buffer"/> that is passed in. Make sure that the buffer is large
            enough to receive the entire message, or the message is truncated to fit the buffer.
            </summary>
            <param name="buffer">The memory buffer that is populated with the message. Make sure
            that the buffer is large enough to receive the entire message, or the message is
            truncated to fit the buffer.</param>
            <param name="cancellation">A cancellation token to observe while waiting for the task to complete.</param>
            <param name="message">The dequeued message.</param>
            <returns>Returns <see langword="false"/> if the queue is empty.</returns>
        </member>
        <member name="M:Cloudtoid.Interprocess.ISubscriber.Dequeue(System.Threading.CancellationToken)">
            <summary>
            Dequeues a message from the queue. If the queue is empty, it *waits* for the
            arrival of a new message. This call is blocking until a message is received.
            This overload allocates a <see cref="T:System.Byte"/> array the size of the message in the
            queue and copies the message from the shared memory to it. To avoid this memory
            allocation, consider reusing a previously allocated <see cref="T:System.Byte"/> array with
            <see cref="M:Cloudtoid.Interprocess.ISubscriber.Dequeue(System.Memory{System.Byte},System.Threading.CancellationToken)"/>.
            <see cref="T:System.Buffers.ArrayPool`1"/> can be a good way of pooling and
            reusing byte arrays.
            </summary>
            <param name="cancellation">A cancellation token to observe while waiting for the task to complete.</param>
        </member>
        <member name="M:Cloudtoid.Interprocess.ISubscriber.Dequeue(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Dequeues a message from the queue. If the queue is empty, it *waits* for the
            arrival of a new message. This call is blocking until a message is received.
            This method does not allocated memory and only populates
            the <paramref name="buffer"/> that is passed in. Make sure that the buffer is large
            enough to receive the entire message, or the message is truncated to fit the buffer.
            </summary>
            <param name="buffer">The memory buffer that is populated with the message. Make sure
            that the buffer is large enough to receive the entire message, or the message is
            truncated to fit the buffer.</param>
            <param name="cancellation">A cancellation token to observe while waiting for the task to complete.</param>
        </member>
        <member name="F:Cloudtoid.Interprocess.QueueHeader.ReadOffset">
            <summary>
            Where the next message could potentially be read
            </summary>
        </member>
        <member name="F:Cloudtoid.Interprocess.QueueHeader.WriteOffset">
            <summary>
            Where the next message could potentially be written
            </summary>
        </member>
        <member name="F:Cloudtoid.Interprocess.QueueHeader.ReadLockTimestamp">
            <summary>
            Time (tiks) at which the read lock was taken. It is set to zero if not lock
            </summary>
        </member>
        <member name="F:Cloudtoid.Interprocess.QueueHeader.Reserved">
            <summary>
            Not used and might be used in the future
            </summary>
        </member>
        <member name="M:Cloudtoid.Interprocess.QueueOptions.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloudtoid.Interprocess.QueueOptions"/> class.
            </summary>
            <param name="queueName">The unique name of the queue.</param>
            <param name="capacity">The maximum capacity of the queue in bytes. This should be at least 16 bytes long and in the multiples of 8</param>
        </member>
        <member name="M:Cloudtoid.Interprocess.QueueOptions.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cloudtoid.Interprocess.QueueOptions"/> class.
            </summary>
            <param name="queueName">The unique name of the queue.</param>
            <param name="path">The path to the directory/folder in which the memory mapped and other files are stored in</param>
            <param name="capacity">The maximum capacity of the queue in bytes. This should be at least 16 bytes long and in the multiples of 8</param>
        </member>
        <member name="P:Cloudtoid.Interprocess.QueueOptions.QueueName">
            <summary>
            Gets the unique name of the queue.
            </summary>
        </member>
        <member name="P:Cloudtoid.Interprocess.QueueOptions.Path">
            <summary>
            Gets the path to the directory/folder in which the memory mapped and other files are stored in.
            </summary>
        </member>
        <member name="P:Cloudtoid.Interprocess.QueueOptions.Capacity">
            <summary>
            Gets the size of the queue in bytes. This does NOT include the space needed for the queue header.
            </summary>
        </member>
        <member name="M:Cloudtoid.Interprocess.QueueOptions.GetQueueStorageSize">
            <summary>
            Gets the full size of the queue that includes both the header and message sections
            </summary>
        </member>
        <member name="M:Cloudtoid.Interprocess.DependencyInjection.AddInterprocessQueue(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers what is needed to create and consume shared-memory queues that are
            cross-process accessible.
            Use <see cref="T:Cloudtoid.Interprocess.IQueueFactory"/> to access the queue.
            </summary>
        </member>
        <member name="M:Cloudtoid.Interprocess.Queue.GetPaddedMessageLength(System.Int64)">
            <summary>
            Calculates the total length of a message which consists of [header][body][padding].
            <list type="bullet">
            <item><term>header</term><description>An instance of <see cref="T:Cloudtoid.Interprocess.MessageHeader"/></description></item>
            <item><term>body</term><description>A collection of bytes provided by the user</description></item>
            <item><term>padding</term><description>A possible padding is added to round up the length to the closest multiple of 8 bytes</description></item>
            </list>
            </summary>
        </member>
        <member name="M:Cloudtoid.Interprocess.QueueFactory.CreatePublisher(Cloudtoid.Interprocess.QueueOptions)">
            <summary>
            Creates a queue message publisher.
            </summary>
        </member>
        <member name="M:Cloudtoid.Interprocess.QueueFactory.CreateSubscriber(Cloudtoid.Interprocess.QueueOptions)">
            <summary>
            Creates a queue message subscriber.
            </summary>
        </member>
        <member name="T:Cloudtoid.Interprocess.InterprocessSemaphore">
            <summary>
            This class opens or creates platform agnostic named semaphore. Named
            semaphores are synchronization constructs accessible across processes.
            </summary>
        </member>
        <member name="M:Cloudtoid.Interprocess.Util.FailFast``1(Microsoft.Extensions.Logging.ILogger{``0},System.String,System.Exception)">
            <summary>
            Logs a critical error and then crashes the process
            </summary>
        </member>
    </members>
</doc>
